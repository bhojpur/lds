// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LdsServiceClient is the client API for LdsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LdsServiceClient interface {
	// StartLocalDetector starts a Detector on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the lds/config.yaml
	//   3. all bytes constituting the Detector YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDetector(ctx context.Context, opts ...grpc.CallOption) (LdsService_StartLocalDetectorClient, error)
	// StartFromPreviousDetector starts a new Detector based on a previous one.
	// If the previous Detector does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDetector(ctx context.Context, in *StartFromPreviousDetectorRequest, opts ...grpc.CallOption) (*StartDetectorResponse, error)
	// StartDetectorRequest starts a new Detector based on its specification.
	StartDetector(ctx context.Context, in *StartDetectorRequest, opts ...grpc.CallOption) (*StartDetectorResponse, error)
	// Searches for Detector(s) known to this instance
	ListDetectors(ctx context.Context, in *ListDetectorsRequest, opts ...grpc.CallOption) (*ListDetectorsResponse, error)
	// Subscribe listens to new Detector(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LdsService_SubscribeClient, error)
	// GetDetector retrieves details of a single Detector
	GetDetector(ctx context.Context, in *GetDetectorRequest, opts ...grpc.CallOption) (*GetDetectorResponse, error)
	// Listen listens to Detector updates and log output of a running Detector
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (LdsService_ListenClient, error)
	// StopDetector stops a currently running Detector
	StopDetector(ctx context.Context, in *StopDetectorRequest, opts ...grpc.CallOption) (*StopDetectorResponse, error)
}

type ldsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLdsServiceClient(cc grpc.ClientConnInterface) LdsServiceClient {
	return &ldsServiceClient{cc}
}

func (c *ldsServiceClient) StartLocalDetector(ctx context.Context, opts ...grpc.CallOption) (LdsService_StartLocalDetectorClient, error) {
	stream, err := c.cc.NewStream(ctx, &LdsService_ServiceDesc.Streams[0], "/v1.LdsService/StartLocalDetector", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldsServiceStartLocalDetectorClient{stream}
	return x, nil
}

type LdsService_StartLocalDetectorClient interface {
	Send(*StartLocalDetectorRequest) error
	CloseAndRecv() (*StartDetectorResponse, error)
	grpc.ClientStream
}

type ldsServiceStartLocalDetectorClient struct {
	grpc.ClientStream
}

func (x *ldsServiceStartLocalDetectorClient) Send(m *StartLocalDetectorRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ldsServiceStartLocalDetectorClient) CloseAndRecv() (*StartDetectorResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartDetectorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldsServiceClient) StartFromPreviousDetector(ctx context.Context, in *StartFromPreviousDetectorRequest, opts ...grpc.CallOption) (*StartDetectorResponse, error) {
	out := new(StartDetectorResponse)
	err := c.cc.Invoke(ctx, "/v1.LdsService/StartFromPreviousDetector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldsServiceClient) StartDetector(ctx context.Context, in *StartDetectorRequest, opts ...grpc.CallOption) (*StartDetectorResponse, error) {
	out := new(StartDetectorResponse)
	err := c.cc.Invoke(ctx, "/v1.LdsService/StartDetector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldsServiceClient) ListDetectors(ctx context.Context, in *ListDetectorsRequest, opts ...grpc.CallOption) (*ListDetectorsResponse, error) {
	out := new(ListDetectorsResponse)
	err := c.cc.Invoke(ctx, "/v1.LdsService/ListDetectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (LdsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &LdsService_ServiceDesc.Streams[1], "/v1.LdsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LdsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type ldsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *ldsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldsServiceClient) GetDetector(ctx context.Context, in *GetDetectorRequest, opts ...grpc.CallOption) (*GetDetectorResponse, error) {
	out := new(GetDetectorResponse)
	err := c.cc.Invoke(ctx, "/v1.LdsService/GetDetector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ldsServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (LdsService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &LdsService_ServiceDesc.Streams[2], "/v1.LdsService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &ldsServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LdsService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type ldsServiceListenClient struct {
	grpc.ClientStream
}

func (x *ldsServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ldsServiceClient) StopDetector(ctx context.Context, in *StopDetectorRequest, opts ...grpc.CallOption) (*StopDetectorResponse, error) {
	out := new(StopDetectorResponse)
	err := c.cc.Invoke(ctx, "/v1.LdsService/StopDetector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LdsServiceServer is the server API for LdsService service.
// All implementations must embed UnimplementedLdsServiceServer
// for forward compatibility
type LdsServiceServer interface {
	// StartLocalDetector starts a Detector on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the lds/config.yaml
	//   3. all bytes constituting the Detector YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalDetector(LdsService_StartLocalDetectorServer) error
	// StartFromPreviousDetector starts a new Detector based on a previous one.
	// If the previous Detector does not have the can-replay condition set this call will result in an error.
	StartFromPreviousDetector(context.Context, *StartFromPreviousDetectorRequest) (*StartDetectorResponse, error)
	// StartDetectorRequest starts a new Detector based on its specification.
	StartDetector(context.Context, *StartDetectorRequest) (*StartDetectorResponse, error)
	// Searches for Detector(s) known to this instance
	ListDetectors(context.Context, *ListDetectorsRequest) (*ListDetectorsResponse, error)
	// Subscribe listens to new Detector(s) updates
	Subscribe(*SubscribeRequest, LdsService_SubscribeServer) error
	// GetDetector retrieves details of a single Detector
	GetDetector(context.Context, *GetDetectorRequest) (*GetDetectorResponse, error)
	// Listen listens to Detector updates and log output of a running Detector
	Listen(*ListenRequest, LdsService_ListenServer) error
	// StopDetector stops a currently running Detector
	StopDetector(context.Context, *StopDetectorRequest) (*StopDetectorResponse, error)
	mustEmbedUnimplementedLdsServiceServer()
}

// UnimplementedLdsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLdsServiceServer struct {
}

func (UnimplementedLdsServiceServer) StartLocalDetector(LdsService_StartLocalDetectorServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalDetector not implemented")
}
func (UnimplementedLdsServiceServer) StartFromPreviousDetector(context.Context, *StartFromPreviousDetectorRequest) (*StartDetectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousDetector not implemented")
}
func (UnimplementedLdsServiceServer) StartDetector(context.Context, *StartDetectorRequest) (*StartDetectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDetector not implemented")
}
func (UnimplementedLdsServiceServer) ListDetectors(context.Context, *ListDetectorsRequest) (*ListDetectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDetectors not implemented")
}
func (UnimplementedLdsServiceServer) Subscribe(*SubscribeRequest, LdsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedLdsServiceServer) GetDetector(context.Context, *GetDetectorRequest) (*GetDetectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetector not implemented")
}
func (UnimplementedLdsServiceServer) Listen(*ListenRequest, LdsService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedLdsServiceServer) StopDetector(context.Context, *StopDetectorRequest) (*StopDetectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopDetector not implemented")
}
func (UnimplementedLdsServiceServer) mustEmbedUnimplementedLdsServiceServer() {}

// UnsafeLdsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LdsServiceServer will
// result in compilation errors.
type UnsafeLdsServiceServer interface {
	mustEmbedUnimplementedLdsServiceServer()
}

func RegisterLdsServiceServer(s grpc.ServiceRegistrar, srv LdsServiceServer) {
	s.RegisterService(&LdsService_ServiceDesc, srv)
}

func _LdsService_StartLocalDetector_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LdsServiceServer).StartLocalDetector(&ldsServiceStartLocalDetectorServer{stream})
}

type LdsService_StartLocalDetectorServer interface {
	SendAndClose(*StartDetectorResponse) error
	Recv() (*StartLocalDetectorRequest, error)
	grpc.ServerStream
}

type ldsServiceStartLocalDetectorServer struct {
	grpc.ServerStream
}

func (x *ldsServiceStartLocalDetectorServer) SendAndClose(m *StartDetectorResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ldsServiceStartLocalDetectorServer) Recv() (*StartLocalDetectorRequest, error) {
	m := new(StartLocalDetectorRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LdsService_StartFromPreviousDetector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousDetectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdsServiceServer).StartFromPreviousDetector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LdsService/StartFromPreviousDetector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdsServiceServer).StartFromPreviousDetector(ctx, req.(*StartFromPreviousDetectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdsService_StartDetector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDetectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdsServiceServer).StartDetector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LdsService/StartDetector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdsServiceServer).StartDetector(ctx, req.(*StartDetectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdsService_ListDetectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDetectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdsServiceServer).ListDetectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LdsService/ListDetectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdsServiceServer).ListDetectors(ctx, req.(*ListDetectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LdsServiceServer).Subscribe(m, &ldsServiceSubscribeServer{stream})
}

type LdsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type ldsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *ldsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LdsService_GetDetector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdsServiceServer).GetDetector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LdsService/GetDetector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdsServiceServer).GetDetector(ctx, req.(*GetDetectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LdsService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LdsServiceServer).Listen(m, &ldsServiceListenServer{stream})
}

type LdsService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type ldsServiceListenServer struct {
	grpc.ServerStream
}

func (x *ldsServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LdsService_StopDetector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopDetectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LdsServiceServer).StopDetector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.LdsService/StopDetector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LdsServiceServer).StopDetector(ctx, req.(*StopDetectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LdsService_ServiceDesc is the grpc.ServiceDesc for LdsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LdsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.LdsService",
	HandlerType: (*LdsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousDetector",
			Handler:    _LdsService_StartFromPreviousDetector_Handler,
		},
		{
			MethodName: "StartDetector",
			Handler:    _LdsService_StartDetector_Handler,
		},
		{
			MethodName: "ListDetectors",
			Handler:    _LdsService_ListDetectors_Handler,
		},
		{
			MethodName: "GetDetector",
			Handler:    _LdsService_GetDetector_Handler,
		},
		{
			MethodName: "StopDetector",
			Handler:    _LdsService_StopDetector_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalDetector",
			Handler:       _LdsService_StartLocalDetector_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _LdsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _LdsService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lds.proto",
}
